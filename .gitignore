# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for Node.js dependency files
node_modules/

# Directory for built React app
build/

# Directory for development environment files
.env.local
.env.development.local
.env.test.local
.env.production.local

# Cache and debugging files for VS Code
.vscode/
.history/

# macOS specific files
.DS_Store

# Editor-specific files
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw*

# Windows thumbnail cache files
Thumbs.db

# Environment variables file
.env.local

# Testing files
coverage/

# Dependency lock files
package-lock.json
yarn.lock

# IDE settings
.idea/

# Compiled output
dist/
out/

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Lock files
.terraform.lock.hcl